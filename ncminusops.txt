// From snow.sierranevada.edu/~csci/ExamplesX/C-Syntax.pdf
BNF Grammar for C-Minus

[x] 1.  program → declaration-list
[x] 2.  declaration-list → declaration-list declaration | declaration
[x] 3.  declaration → var-declaration | fun-declaration
[~] 4.  var-declaration → type-specifier ID ; | type-specifier ID [ NUM ] ;
[x] 5.  type-specifier → int | void
[x] 6.  fun-declaration → type-specifier ID ( params) compound-stmt
[x] 7.  params → param-list | void
[x] 8.  param-list → param-list , param | param
[~] 9.  param → type-specifier ID | type-specifier ID [ ]
[~] 10.  compound-stmt → { local-declarations statement-list }
[x] 11.  local-declarations → local-declarations var-declarations | empty
[x] 12.  statement-list → statement-list statement | empty
[~] 13.  statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
[~] 14.  expression-stmt → expression ; | ;
[x] 15.  selection-stmt → if ( expression) statement | if ( expression) statement else statement
[x] 16.  iteration-stmt → while ( expression) statement
[x] 17.  return-stmt → return ; | return expression ;
[x] 18.  expression → var = expression | simple-expression
[x] 19.  var → ID | ID [ expression ]
[x] 20.  simple-expression → additive-expression relop additive-expression | additive-expression
[~] 21.  relop → <= | < | > | >= | == | !=
[x] 22.  additive-expression → additive-expression addop term | term
[x] 23.  addop → + | -
[x] 24.  term → term mulop factor | factor
[x] 25.  mulop → * | /
[~] 26.  factor → ( expression) | var | call | NUM
[~] 27.  call → ID ( args)
[x] 28.  args → arg-list | empty
[x] 29.  arg-list → arg-list , expression | expression

Keywords:
else if int return void while

Special symbols:
+ - * / < <= > >= == != = ; , ( ) [ ] { } /* */

ID = letter letter*
NUM = digit digit*
letter = a | .. | z | A | .. | Z
digit = 0 | .. | 9
Comments: /* ... */
